name: autoperf
version: "0.2"
author: Gerd Zellweger <mail@gerdzellweger.com>
about: Use performance counters with little domain knowledge.
args:
    - verbose:
        short: v
        multiple: true
        help: Do more verbose logging (-v = info, -vv = debug, -vvv = trace, default is warn).
subcommands:
    - profile:
        settings:
            - TrailingVarArg
        about: Measure all available H/W events for a command using `perf stat`.
        args:
            - output:
                short: o
                long: output
                help: Set output directory.
                value_name: DIRECTORY
                takes_value: true
            - record:
                short: r
                long: record
                help: Use `perf record` instead of `perf stat` (not recommended due to sampling rate issues).
                takes_value: true
            - COMMAND:
                help: Command to execute.
                required: true
                multiple: true
    - pair:
        about: Run a set of programs pairwise together on the machine (while measuring all counters).
        args:
            - start:
                short: b
                long: base
                help: Skip the first x configuration (used to evaluate the same manifest simultaneously on multiple identical machines).
                takes_value: true
            - step:
                short: s
                long: step
                help: Only evaluate every x-th configuration (used to evaluate the same manifest simultaneously on multiple identical machines).
                takes_value: true
            - dryrun:
                short: r
                long: dryrun
                help: Don't run anything, just print what it would do.
            - directory:
                help: Path of manifest directory.
                required: true
    - aggregate:
        about: Merge counter measurements generated with the `profile` or `pair` command in a single CSV file.
        args:
            - core:
                short: c
                long: core
                takes_value: true
                possible_values: [ all, shared, exclusive, none ]
                help: Which core events to include (default exclusive = only cores where program was running on).
            - uncore:
                short: u
                long: uncore
                takes_value: true
                possible_values: [ all, shared, exclusive, none ]
                help: Which uncore events to include (default exclusive = only uncore units that are exclusively used by program).
            - output:
                short: o
                long: output
                help: Set output file (defaults to <input dir>/results.csv).
                value_name: FILENAME
                takes_value: true
            - directory:
                help: Set input directory.
                required: true
    - stats:
        about: Dump statistics about performance events on Intel architectures.
        args:
            - directory:
                help: Where to store the generated output (CSV) files.
                required: true
    - search:
        about: Find performance events potentially not covered in Intel publicly available manuals.

#
# We don't support these two subcommands at the moment:
#

#    - scale:
#        settings:
#            - TrailingVarArg
#        about: Measure all available H/W events for an application using `perf stat`. Do multiple runs and increase the number of threads.
#        args:
#            - debug:
#                short: d
#                long: debug
#                help: Print debug information verbosely.
#            - dryrun:
#                short: r
#                long: dryrun
#                help: Don't run anything, just print what it would do.
#            - directory:
#                help: Path of manifest directory.
#                required: true

#    - mkgroup:
#        settings:
#            - TrailingVarArg
#        about: Given a machine, form the largest possible group of events from a given ranking input file.
#        args:
#            - file:
#                short: i
#                long: input
#                help: Input file (weka ranking).
#                value_name: FILE
#                takes_value: true

